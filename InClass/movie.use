
-- This is a USE model that has embedded SOIL operations in it 


model MovieRental 

enum PriceCode {regular, family, newRelease} 



-------------------------------------------------------------------------------
--classes 
-------------------------------------------------------------------------------

class Customer 
	attributes 
		name:String 
		numRen:Integer;

	operations 
		addRental() 

		getName() 

		getTotalCharge():Collection(Charge)
		begin
			result := self.charges
		end

		Statement() 
		begin 
			declare aCharge:Charge, sm:Movie; 
			self.numRen:=self.rentals->size(); 
			for ren in self.rentals do 
				sm:=ren.getMovie(); 
				aCharge:= new Charge; 
				aCharge.chVal:=ren.getCharge(); 
				aCharge.chT:=sm.getTitle(); 
				insert(self,aCharge) into customerCharges 
			end 
		end 
end 


class Rental 
	attributes 
		daysRented:Integer 

	operations 
		getDaysRented():Integer 
		begin 
			result := self.daysRented; 
		end 

		getCharge():Real 
		begin 
			declare charge:Real, m:Movie, pc:PriceCode,days:Integer; 
			charge:=0; 
			m:=self.getMovie(); 
			pc:=m.getPriceCode(); 
			days:=self.getDaysRented(); 

			-- Regular Movies are 2 plus an extra 1.5 for each day over 2.
			if pc=PriceCode::regular then 
				charge:=2.0; 
				if days > 2 then 
					charge:=charge + (days - 2) * 1.5; 
				end; 
			end;
			-- Family Movies are 1.5 plus an extra 1.5 for each day over 3.
			if pc=PriceCode::family then 
				charge:=1.5; 
				if days > 3 then 
					charge:=charge + (days - 3) * 1.5; 
				end; 
			end; 
			if pc=PriceCode::newRelease then 
				charge:=days * 3.0;
			end;

			result:=charge;
		end 

		getMovie(): Movie
		begin
			result := self.movie;
		end
end 


class Movie 
	attributes 
		title:String 
		priceCode:PriceCode 

	operations 
		getPriceCode():PriceCode 
		begin 
		result := self.priceCode; 
		end 

		setPriceCode(code:PriceCode) 
		begin 
		self.priceCode := code; 
		end 

		getTitle():String  

		begin 
		result := self.title; 
		end 
end 


class Charge 
	attributes 
		chVal:Real 
		chT: String 

	operations 
end 




-------------------------------------------------------------------------------
--associations 
-------------------------------------------------------------------------------

association custRentals between 
	Customer [1] role renter 
	Rental [0..*] role rentals 
	end 

association movRental between 
	Rental [0..*] role movRentals 
	Movie [1] role movie 
	end 

association customerCharges between 
	Customer [1] role cust 
	Charge [0..*] role charges 
	end 




-------------------------------------------------------------------------------
--constraints 
-------------------------------------------------------------------------------

constraints 
	context Customer 
		inv maxRental:numRen <= 10 
		inv agreement:rentals->size = numRen 
		inv rentals:rentals->notEmpty 
