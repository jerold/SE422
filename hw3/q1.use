model CoffeeDispenser
/*
 * A simple class for a coffee dispenser.
 * Taken directly from http://sourceforge.net/apps/mediawiki/useocl/index.php?title=Protocol_State_Machines
 */
class CoffeeDispenser
  attributes
    amount : Integer init = 0
    coffeeState : CoffeeState
    noCoinsState : CoffeeState
    hasCoinsState : CoffeeState
    enoughCoinsState : CoffeeState

  operations
    initInstances()
    begin
      declare noCoins1:NoCoins, hasCoins1:HasCoins, enoughCoins1:EnoughCoins;

      noCoins1 := new NoCoins;
      self.noCoinsState := noCoins1;
      insert(self, noCoins1) into dispenserState;

      hasCoins1 := new HasCoins;
      self.hasCoinsState := hasCoins1;
      insert(self, hasCoins1) into dispenserState;

      enoughCoins1 := new EnoughCoins;
      self.enoughCoinsState := enoughCoins1;
      insert(self, enoughCoins1) into dispenserState;

      self.coffeeState := noCoins1
    end

    accept(i : Integer)
    begin
      self.coffeeState.accept(i)
    end

    brew()
    begin
      self.coffeeState.brew()
    end

    reset()
    begin
      self.coffeeState.reset()
    end

  statemachines
    /* This state machine describes the
     * "lifecycle" of the coffee dispenser.
     */
    psm Usage
      states
        -- The start node
        startUp:initial
        -- The initial state after creation.
        noCoins    [amount = 0]
        -- Some coins were inserted, but not enough.
        hasCoins     [amount > 0 and amount < 100]
        -- Enough coins, ready to brew.
        enoughCoins [amount >= 100]
      transitions
        -- Define the first state after creation.
        startUp -> noCoins     { create }

        -- A coin was inserted, but it wasn't enough.
        noCoins -> hasCoins  { [i > 0 and i + amount < 100] accept() }
        -- Enough money was inserted.
        noCoins -> enoughCoins { [i + amount >= 100] accept() }
        -- I can't let you brew that star fox
        noCoins -> noCoins   { brew() }
        -- I can't let you brew that star fox
        noCoins -> noCoins   { reset() }

        -- Another coin was inserted, but it wasn't enough.
        hasCoins -> hasCoins    { [i + amount < 100] accept() }
        -- Enough money was inserted.
        hasCoins -> enoughCoins { [i + amount >= 100] accept() }
        -- More money was inserted.
        hasCoins -> hasCoins   { brew() }
        -- Abort
        hasCoins -> noCoins   { reset() }

        -- Sure, we'll take your money
        enoughCoins -> enoughCoins  { accept() }
        -- Abort
        enoughCoins -> noCoins  { reset() }
        -- Brew coffe, no change ;-)
        enoughCoins -> noCoins  { brew() }
    end
end

class CoffeeState
  operations
    accept(i : Integer)
    begin
      self.coffeeDispenser.amount := self.coffeeDispenser.amount + i;
      if i > 0 and self.coffeeDispenser.amount < 100 then
        self.coffeeDispenser.coffeeState := self.coffeeDispenser.hasCoinsState;
      end;
      if i > 0 and self.coffeeDispenser.amount >= 100 then
        self.coffeeDispenser.coffeeState := self.coffeeDispenser.enoughCoinsState;
      end;
    end

    brew()
    begin
    end

    reset()
    begin
      self.coffeeDispenser.amount := 0;
      self.coffeeDispenser.coffeeState := self.coffeeDispenser.noCoinsState;
    end
end

class NoCoins < CoffeeState
end

class HasCoins < CoffeeState
end

class EnoughCoins < CoffeeState
  operations
    brew()
    begin
      self.coffeeDispenser.amount := 0;
      self.coffeeDispenser.coffeeState := self.coffeeDispenser.noCoinsState;
    end
end

association dispenserState between
  CoffeeDispenser[1] role coffeeDispenser
  CoffeeState[1] role coffeeState
end