model fps
/*
 * A simple class for a fps.
 */
class fps
  attributes
    amount : Integer init = 0
    fpsState : State
    attackState : State
    neutralState : State
    panicState : State
    dieState : State

  operations
    initInstances()
    begin
      declare attack1:attack;
	   attack1 := new attack;
      self.attackState := attack1;
      insert (self, attack1) into dispenserState;

      declare neutral1 : neutral;
	  neutral1 := new neutral;
      self.neutralState := neutral1;
      insert (self, neutralState) into dispenserState;

      declare panic1 Panic;
      panic1 := new Panic;
      self.PanicState := panic1;
      insert (self, panicState) into dispenserState;

      self.fpsState := attack1;
    end

    accept(i : Integer)
    begin
      self.fpsState.accept(i)
    end

    brew()
    begin
      self.fpsState.brew()
    end

    reset()
    begin
      self.fpsState.reset()
    end

  statemachines
    /* This state machine describes the
     * "lifecycle" of the coffee dispenser.
     */
    psm Usage
      states
        -- The start node
        startUp:initial
        -- The initial state after creation.
        noCoins    [amount = 0]
        -- Some coins were inserted, but not enough.
        neutral     [amount > 0 and amount < 100]
        -- Enough coins, ready to brew.
        Panic [amount >= 100]
      transitions
        -- Define the first state after creation.
        startUp -> noCoins     { create }
        -- A coin was inserted, but it wasn't enough.
        noCoins -> neutral  { [i > 0 and amount < 100] accept() }
        -- Enough money was inserted.
        noCoins -> Panic { [i > 0 and amount >= 100] accept() }
        -- Abort
        neutral -> noCoins   { reset() }
        -- Enough money was inserted.
        neutral -> Panic { [i + amount >= 100] accept() }
        -- Another coin was inserted, but it wasn't enough.
        neutral -> neutral    { [i + amount < 100] accept() }
        -- Abort
        Panic -> noCoins  { reset() }
        -- Brew coffe, no change ;-)
        Panic -> noCoins  { brew()   }
    end
end

class State
  operations
    accept(i : Integer)
    begin
      self.coffeeDispenser.amount := self.coffeeDispenser.amount + i;
    end

    brew()
    begin
      self.coffeeDispenser.amount := 0;
    end

    reset()
    begin
      self.coffeeDispenser.amount := 0;
    end
end

class attack < State
  operations
    accept(i : Integer)
    brew()
    begin
      
    end
    reset()
end

class neutral < State
  operations
    accept(i : Integer)
    brew()
    reset()
end

class Panic < State
  operations
    accept(i : Integer)
    brew()
    reset()
end

association dispenserState between
  CoffeeDispenser[1] role coffeeDispenser
  fpsState[1] role fpsState
end