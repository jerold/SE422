model fps
/*
 * A simple class for a fps.
 */
class fps
  attributes
    amount : Integer init = 0
    fpsState : State
    attackState :  Attack
    neutralState : Neutral
    panicState :  Panic
    dieState : Die

     

  operations
    initInstances()
    begin
      declare attack1:Attack;
	   attack1 := new Attack;
      self.attackState := attack1;
      insert (self, attack1) into dispenserState;

      declare neutralState:Neutral;
	  neutralState := Neutral;
      self.NeutralState := neutralState;
      insert (self, neutralState) into dispenserState;

      declare enoughCoins1: enoughCoins;
      self.enoughCoinsState := enoughCoins1;
      insert (self, enoughCoins1) into dispenserState;

      self.fpsState := attack1;
    end

    accept(i : Integer)
    begin
      self.fpsState.accept(i)
    end

    brew()
    begin
      self.fpsState.brew()
    end

    reset()
    begin
      self.fpsState.reset()
    end

  statemachines
    /* This state machine describes the
     * "lifecycle" of the coffee dispenser.
     */
    psm Usage
      states
        -- The start node
        startUp:initial
        -- The initial state after creation.
        noCoins    [amount = 0]
        -- Some coins were inserted, but not enough.
        Neutral     [amount > 0 and amount < 100]
        -- Enough coins, ready to brew.
        enoughCoins [amount >= 100]
      transitions
        -- Define the first state after creation.
        startUp -> noCoins     { create }
        -- A coin was inserted, but it wasn't enough.
        noCoins -> Neutral  { [i > 0 and amount < 100] accept() }
        -- Enough money was inserted.
        noCoins -> enoughCoins { [i > 0 and amount >= 100] accept() }
        -- Abort
        Neutral -> noCoins   { reset() }
        -- Enough money was inserted.
        Neutral -> enoughCoins { [i + amount >= 100] accept() }
        -- Another coin was inserted, but it wasn't enough.
        Neutral -> Neutral    { [i + amount < 100] accept() }
        -- Abort
        enoughCoins -> noCoins  { reset() }
        -- Brew coffe, no change ;-)
        enoughCoins -> noCoins  { brew()   }
    end
end

class fpsState
  operations
    accept(i : Integer)
    begin
      self.coffeeDispenser.amount := self.coffeeDispenser.amount + i;
    end

    brew()
    begin
      self.coffeeDispenser.amount := 0;
    end

    reset()
    begin
      self.coffeeDispenser.amount := 0;
    end
end

class noCoins < fpsState
  operations
    accept(i : Integer)
    brew()
    begin
      
    end
    reset()
end

class Neutral < fpsState
  operations
    accept(i : Integer)
    brew()
    reset()
end

class enoughCoins < fpsState
  operations
    accept(i : Integer)
    brew()
    reset()
end

association dispenserState between
  CoffeeDispenser[1] role coffeeDispenser
  fpsState[1] role fpsState
end