model FPS

/*
 * FPS with state machine
 */
class Character
	attributes
		name : String init = 'Unknown'
		health : Integer init = 1
		maxVelocity : Integer init = 1
		xCoordinate : Integer
		yCoordinate : Integer
		attackRange : Integer init = 5
		weaponStrength : Integer init = 0
		target : Character
		charState : CharacterState
		playerCharState : CharacterState
		neutralCharState : CharacterState
		attackCharState : CharacterState
		panicCharState : CharacterState
		dieCharState : CharacterState

	operations
		initInstances()
		begin
			declare playerCharState1:CharacterState,
				   neutralCharState1:CharacterState,
				    attackCharState1:CharacterState,
				     panicCharState1:CharacterState,
				       dieCharState1:CharacterState;

			playerCharState1 := new PlayerState;
			self.playerCharState := playerCharState1;
			insert(self, playerCharState1) into charState;

			neutralCharState1 := new NeutralState;
			self.neutralCharState := neutralCharState1;
			insert(self, neutralCharState1) into charState;

			attackCharState1 := new AttackState;
			self.attackCharState := attackCharState1;
			insert(self, attackCharState1) into charState;

			panicCharState1 := new PanicState;
			self.panicCharState := panicCharState1;
			insert(self, panicCharState1) into charState;

			dieCharState1 := new DieState;
			self.dieCharState := dieCharState1;
			insert(self, dieCharState1) into charState;

			self.charState := self.neutralCharState;
			self.initCharacter();
		end

		/*
		 * Default values for a game object
		 */
		initCharacter()
		begin
		end

		/*
		 * Called for each Character each turn by the kernal
		 */
		update()
		begin
			self.charState.update();
		end

		/*
		 * Means of fetching a new target for player and npcs
		 */
		setTarget()
		begin
			if Character.allInstances->select(p:Character | p.name <> self.name and p.health > 0)->notEmpty() then
				self.target := Character.allInstances->select(p:Character | p.name <> self.name and p.health > 0)->asSequence()->first();
			end;
		end

		/*
		 * Turn in opposite direction from enemy and get to running
		 */
		doMove(runningAway : Boolean)
		begin
			declare velocity : Integer;
			if runningAway then
				velocity := -self.maxVelocity
			else 
				velocity := self.maxVelocity
			end;

			if self.xCoordinate < self.target.xCoordinate then
				self.moveBy(velocity, 0);
			else
				if self.xCoordinate > self.target.xCoordinate then
					self.moveBy(-velocity, 0);
				end;
			end;
			if self.yCoordinate < self.target.yCoordinate then
				self.moveBy(0, velocity);
			else
				if self.yCoordinate > self.target.yCoordinate then
					self.moveBy(0, -velocity);
				end;
			end;
		end

		/*
		 * Delta move method
		 */
		moveBy(dx : Integer, dy : Integer)
		begin
			self.xCoordinate := self.xCoordinate + dx;
			self.yCoordinate := self.yCoordinate + dy;
		end

		/*
		 * Teleport move method
		 */
		moveTo(nx : Integer, ny : Integer)
		begin
			self.xCoordinate := nx;
			self.yCoordinate := ny;
		end

		/*
		 * Lets be honest, this is why npcs exist
		 */
		takeHit(damage : Integer)
		begin
			self.health := self.health - damage;
		end

		/*
		 * Hit that dude
		 */
		doAttack()
		begin
			self.target.takeHit(self.weaponStrength);
			if self.target.health <= 0 then
				self.setTarget()
			end;
		end

		/*
		 * Characters can only attack enemies within range
		 */
		canAttack(): Boolean
		begin
			declare retVal : Boolean;
			retVal := false;
			if self.xCoordinate + self.attackRange > self.target.xCoordinate and
			   self.xCoordinate - self.attackRange < self.target.xCoordinate and
			   self.yCoordinate + self.attackRange > self.target.yCoordinate and
			   self.yCoordinate - self.attackRange < self.target.yCoordinate then
				retVal := true
			end;
			result := retVal;
		end

		/*
		 * Pretty self documenting here...
		 */
		fight()
		begin
			declare canAtck : Boolean;
			canAtck := self.canAttack();
			if canAtck then
				self.doAttack();
			else
				self.doMove(false);
			end;
		end

		/*
		 * Pretty self documenting here...
		 */
		flee()
		begin
			self.doMove(true);
		end


	statemachines
		/*
		 * Lifecycle of an FPT character
		 */
		psm Usage
			states
				startUp:initial
				player [self.name = 'The Player' and self.health > 0]
				neutral [self.name <> 'The Player' and self.target.health <= 0 and self.health > 0]
				attack [self.name <> 'The Player' and self.target.health > 0 and self.health > 10]
				panic [self.name <> 'The Player' and self.target.health > 0 and self.health <= 10 and self.health > 0]
				die [self.health <= 0]
			transitions
				startUp -> neutral { create }

				player -> player {[self.health > 0] update()}
				player -> die {[self.health <= 0] update()}

				neutral -> player {[self.name = 'The Player' and self.health > 0] update()}
				neutral -> neutral {[self.name <> 'The Player' and self.target.health <= 0 and self.health > 0] update()}
				neutral -> attack {[self.name <> 'The Player' and self.target.health > 0 and self.health > 10] update()}
				neutral -> panic {[self.name <> 'The Player' and self.target.health > 0 and self.health <= 10 and self.health > 0] update()}
				neutral -> die {[self.health <= 0] update()}

				attack -> neutral {[self.name <> 'The Player' and self.target.health <= 0 and self.health > 0] update()}
				attack -> attack {[self.name <> 'The Player' and self.target.health > 0 and self.health > 10] update()}
				attack -> panic {[self.name <> 'The Player' and self.target.health > 0 and self.health <= 10 and self.health > 0] update()}
				attack -> die {[self.health <= 0] update()}

				panic -> neutral {[self.name <> 'The Player' and self.target.health <= 0 and self.health > 0] update()}
				panic -> attack {[self.name <> 'The Player' and self.target.health > 0 and self.health > 10] update()}
				panic -> panic {[self.name <> 'The Player' and self.target.health > 0 and self.health <= 10 and self.health > 0] update()}
				panic -> die {[self.health <= 0] update()}

				die -> die {update()}
		end
end

class PlayerCharacter < Character
	operations
		/*
		 * Default values for a game object
		 */
		initCharacter()
		begin
			self.charState := self.playerCharState;
			self.name := 'The Player';
			self.xCoordinate := 0;
			self.yCoordinate := 0;
			self.health := 100;
			self.maxVelocity := 2;
			self.weaponStrength := 10;
		end
end

class NonPlayerCharacter < Character
	operations
		/*
		 * Default values for a game object
		 */
		initCharacter()
		begin
			self.name := 'NPC';
			self.xCoordinate := 50;
			self.yCoordinate := 50;
			self.health := 30;
			self.weaponStrength := 10;
			self.setTarget();
		end
end


/*
 * Abstract State
 */
class CharacterState
	operations
		update()
		begin
			if self.character.name = 'The Player' then
				self.character.charState := self.character.playerCharState
			else
				if self.character.health <= 0 then
					self.character.charState := self.character.dieCharState
				else
					if self.character.target.health > 0 then
						if self.character.health <= 10 then
							self.character.charState := self.character.panicCharState;
						else
							self.character.charState := self.character.attackCharState;
						end;
					else
						self.character.charState := self.character.neutralCharState;
					end;
				end;
			end;
		end
end

/*
 * Player does not transition, but does regenerate health
 */
class PlayerState < CharacterState
	operations
		update()
		begin
			if self.character.name = 'The Player' then
				self.character.charState := self.character.playerCharState
			else
				if self.character.health <= 0 then
					self.character.charState := self.character.dieCharState
				else
					if self.character.health < 100 then
						self.character.health := self.character.health + 1;
					end;
				end;
			end;
		end
end

/*
 * Check for an player Character
 * IF player exists
 * 		IF players weaponStrength < health ATTACK
 * 		ELSE PANIC
 * ELSE continue to be NEUTRAL
 *
 * may also DIE if hit to death
 */
class NeutralState < CharacterState
end

/*
 * IF player dies become NEUTRAL
 * ELSE IF health drops below enemies weapon strength or 10 PANIC
 * ELSE continue to ATTACK
 */
class AttackState < CharacterState
	operations
		update()
		begin
			if self.character.name = 'The Player' then
				self.character.charState := self.character.playerCharState
			else
				if self.character.health <= 0 then
					self.character.charState := self.character.dieCharState
				else
					if self.character.target.health > 0 then
						if self.character.health <= 10 then
							self.character.charState := self.character.panicCharState;
						else
							self.character.fight();
							if self.character.target.health <= 0 then
								self.character.charState := self.character.neutralCharState;
							end;
						end;
					else
						self.character.charState := self.character.neutralCharState;
					end;
				end;
			end;
		end
end

/*
 * IF player dies become NEUTRAL
 * ELSE IF players health drops below weaponStrength ATTACK
 * ELSE continue to PANIC
 */
class PanicState < CharacterState
	operations
		update()
		begin
			if self.character.name = 'The Player' then
				self.character.charState := self.character.playerCharState
			else
				if self.character.health <= 0 then
					self.character.charState := self.character.dieCharState
				else
					if self.character.target.health > 0 then
						if self.character.health <= 10 then
							self.character.flee();
						else
							self.character.charState := self.character.attackCharState;
						end;
					else
						self.character.charState := self.character.neutralCharState;
					end;
				end;
			end;
		end
end

/*
 * I guess they could sort their baseball cards in heaven...
 */
class DieState < CharacterState
end


association charState between
  Character[1] role character
  CharacterState[5] role characterState
end

